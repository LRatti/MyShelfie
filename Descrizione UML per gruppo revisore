Ciao ragazzi, queste sono giusto due righe per spiegarvi il funzionamento del nostro UML.

Incominciando con gli aspetti architetturali, abbiamo deciso di affrontare il problema dell'inizializzazione delle
Common Goal Cards tramite un pattern di tipo strategy. L'inizializzazione avviene estraendo a caso due carte dal
DeckCommon (nel momento in cui viene pescata una carta l'algoritmo corrispondende viene rimosso dal deckCommon).
Questa parte è ancora da migliorare visto che ci sono algoritmi simili che possono essere accorpati per ottenere
meno classi.
Per quanto riguarda le carte personali, abbiamo deciso di usare un file json per salvare tutte le 12 istanze,
a run-time viene scelta una carta e assegnata a un giocatore (come per le carte comuni, la stessa carta personale non
può capitare a 2 o più persone diverse).
La board segue lo stesso pensiero delle carte comuni: viene inizializzata in base al numero di
giocatori, istanziando lo stile e le dimensioni da un file json.

Passando ora alla parte funzionale, la classe Game andrà a coprire la quasi totalità delle funzioni del controller.
Le Tiles possono essere anche di un colore TRASPARENTE che usiamo per riempire le celle della Board dove non possono
esserci tiles. Le tiles vengono scelte in base alle loro coordinate, il metodo getAvailableTiles nella classe Board si
occupa proprio di restituire le coordinate delle tiles disponibili.

Per quanto riguarda il flow di gioco, l'idea è che una volta che il primo giocatore si collega, imposta anche
i parametri della  nuova partita (costruzione di Game). Quando il numero numero di giocatori collegati viene rispettato,
il gioco inizia (Game.startGame()). Da qui in poi a turno ogni giocatore fa la sua mossa (Player.play()). Alla fine di
ogni turno ci sarà un algoritmo che valuta l'attribuzione dei punti delle Common Goal Cards e un altro che controlla
se la Shelf è piena. Nel caso in cui quest'ultimo restituisse 'true' avverrà il canonico "ultimo giro"
e il calcolo finale dei punti.

Buona correzione :)